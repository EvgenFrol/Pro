public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Введите пример (например, 1+4 или I+IV) используя римские или арабские числа от 1 до 10/от I до X и используя математические знаки +,-,*,/: ");
        String input = scanner.nextLine();

        String[] parts = input.split(""); // Разделяем введенное выражение на отдельные части

        if (parts.length != 3) {
            System.out.println("формат математической операции не удовлетворяет заданию - два операнда и один оператор (+, -, /, *)");
        return;
        }

       // if (parts.length != 1) {
        //    System.out.println("Строка не является математической операцией");
        //     return;
        //}

        String operand1 = parts[0];
        String operator = parts[1];
        String operand2 = parts[2];

        boolean isArabic = isNumeric(operand1) && isNumeric(operand2); // Проверяем, являются ли оба операнда арабскими числами
        boolean isRoman = !isArabic; // Если не арабские числа, считаем их римскими

        if (isArabic) {
            int num1 = Integer.parseInt(operand1);
            int num2 = Integer.parseInt(operand2);
            int result = calculate(num1, operator, num2);
            System.out.println("Ответ: " + result);
        } else if (isRoman) {
            try {
                int num1 = convertRomanToArabic(operand1);
                int num2 = convertRomanToArabic(operand2);

                if (num1 == -1 || num2 == -1) {
                    System.out.println("Некорректные римские числа!");
                    return;
                }

                int result = calculate(num1, operator, num2);
                String romanResult = convertArabicToRoman(result);
                System.out.println("Ответ: " + romanResult);
            } catch (IllegalArgumentException e) {
                System.out.println("Некорректные римские числа!");
            }
        }
    }

    // Проверяет, является ли строка числом
    public static boolean isNumeric(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // Выполняет операцию между двумя числами и возвращает результат
    public static int calculate(int num1, String operator, int num2) {
        switch (operator) {
            case "+":
                return num1 + num2;
            case "-":
                return num1 - num2;
            case "*":
                return num1 * num2;
            case "/":

                return num1 / num2;

            default:
                throw new IllegalArgumentException("Некорректный оператор!");
        }
    }
    // Конвертирует римское число в арабское
    public static int convertRomanToArabic(String roman) {
        switch (roman.toUpperCase()) {
            case "0":
                return 0;
            case "I":
                return 1;
            case "II":
                return 2;
            case "III":
                return 3;
            case "IV":
                return 4;
            case "V":
                return 5;
            case "VI":
                return 6;
            case "VII":
                return 7;
            case "VIII":
                return 8;
            case "IX":
                return 9;
            case "X":
                return 10;
            default:
                return -1;
        }
    }

    // Конвертирует арабское число в римское
    public static String convertArabicToRoman(int number) {
        String[] romanSymbols = {"I", "IV", "V", "IX", "X", "XL", "L", "XC", "C"};
        int[] arabicValues = {1, 4, 5, 9, 10, 40, 50, 90, 100};

        StringBuilder roman = new StringBuilder();
        int i = arabicValues.length - 1;

        while (number > 0) {
            if (number >= arabicValues[i]) {
                roman.append(romanSymbols[i]);
                number -= arabicValues[i];
            } else {
                i--;
            }
        }

        return roman.toString();
    }
}
